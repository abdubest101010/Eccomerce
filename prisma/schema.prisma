generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid()) // Changed to String
  name          String
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  orders        Order[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text // Allow longer strings
  access_token      String? @db.Text // Allow longer strings
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text // Allow longer strings
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) // Changed to String
  sessionToken String   @unique
  userId       String   // Changed to String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  price       Float
  imageUrl    String
  categoryId  Int
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryName String
  stock       Int
  orders      OrderProduct[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Order {
  id         Int            @id @default(autoincrement())
  user       User           @relation(fields: [userId], references: [id])
  userId     String         // Changed to String
  products   OrderProduct[]
  total      Float
  status     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model OrderProduct {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}